import asyncio
import logging
import random

from playwright.async_api import Page

import config
from configure_logger import configure
from exceptions import CloudflareRestartException

logger = logging.getLogger(__name__)
configure(logger)


async def bypass_cloudflare(page: Page):
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ö–æ–¥–∞ Cloudflare —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            await asyncio.wait_for(
                page.wait_for_load_state(config.WAIT_UNTIL),
                timeout=config.CLOUDFLARE_TIMEOUTS
            )
        except asyncio.TimeoutError:
            logger.warning("‚è≥ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Cloudflare
        if not await check_cloudflare(page):
            logger.info("‚úÖ Cloudflare –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
            return True

        logger.warning("üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ Cloudflare. –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –æ–±—Ö–æ–¥–∞...")

        # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ Cloudflare
        # await simulate_human_mouse_movement(page)

        for attempt in range(config.CLOUDFLARE_ATTEMPTS):
            logger.info(f"üõ°Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ö–æ–¥–∞ {attempt + 1}/{config.CLOUDFLARE_ATTEMPTS}...")

            try:
                # –ü–æ–∏—Å–∫ iframe —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                challenge_frame = None
                logger.info("üîç –ü–æ–∏—Å–∫ iframe Cloudflare...")

                for search_attempt in range(config.CLOUDFLARE_FIND_SECONDS):
                    try:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º–æ–≤
                        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM

                        if not await check_cloudflare(page):
                            return True

                        for frame in page.frames:
                            if frame.url and frame.url.startswith("https://challenges.cloudflare.com"):
                                challenge_frame = frame
                                logger.info(f"‚úÖüîç –ù–∞–π–¥–µ–Ω iframe Cloudflare: {frame.url}")
                                break

                        if challenge_frame:
                            break

                        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º iframe –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                        iframe_element = await page.query_selector('iframe[src*="cloudflare"]')
                        if iframe_element:
                            logger.info("‚úÖüîç –ù–∞–π–¥–µ–Ω iframe Cloudflare –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É")
                            break

                        if search_attempt % 5 == 0:
                            logger.info(f"‚è≥üîç –ü–æ–∏—Å–∫ iframe... ({search_attempt + 1}/{config.CLOUDFLARE_FIND_SECONDS})")

                        await asyncio.sleep(1)

                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏èüîç –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ iframe (–ø–æ–ø—ã—Ç–∫–∞ {search_attempt + 1}): {e}")
                        await asyncio.sleep(1)

                if not challenge_frame:
                    logger.error(f"‚ùåüîç –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ iframe Cloudflare –∑–∞ {config.CLOUDFLARE_FIND_SECONDS} —Å–µ–∫—É–Ω–¥")

                    # –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ - –ø–æ–∏—Å–∫ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                    try:
                        iframe_element = await asyncio.wait_for(
                            page.query_selector('iframe[src*="cloudflare"]'),
                            timeout=config.CLOUDFLARE_TIMEOUTS
                        )
                        if iframe_element:
                            logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å iframe —ç–ª–µ–º–µ–Ω—Ç–æ–º")
                            await _handle_iframe_element(page, iframe_element)
                            if await _wait_for_cloudflare_completion(page):
                                return True
                    except Exception as e:
                        logger.error(f"‚ùåüí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {e}")

                    continue

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã iframe
                logger.info("üó∫Ô∏è Iframe Cloudflare –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—É—á–∞—é –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                try:
                    frame_element = await asyncio.wait_for(
                        challenge_frame.frame_element(),
                        timeout=config.CLOUDFLARE_TIMEOUTS
                    )

                    if not frame_element:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç iframe")
                        continue

                    await asyncio.sleep(7)

                    bounding_box = await asyncio.wait_for(
                        frame_element.bounding_box(),
                        timeout=config.CLOUDFLARE_TIMEOUTS
                    )

                    if not bounding_box:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã iframe")
                        await asyncio.sleep(5)
                        continue

                except asyncio.TimeoutError:
                    logger.error("‚è≥‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç iframe")
                    continue
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç iframe: {e}")
                    continue

                # –ù–µ–±–æ–ª—å—à–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
                checkbox_x = bounding_box["x"] + 25
                checkbox_y = bounding_box["y"] + bounding_box["height"] / 2

                # –ü–æ–¥–≤–æ–¥–∏–º –º—ã—à—å –∫ —á–µ–∫–±–æ–∫—Å—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ–º
                pre_click_x = checkbox_x + random.randint(-10, 10)
                pre_click_y = checkbox_y + random.randint(-10, 10)
                await page.mouse.move(pre_click_x, pre_click_y)
                await asyncio.sleep(random.uniform(0.2, 0.5))

                # –ö–ª–∏–∫–∞–µ–º –ø–æ —á–µ–∫–±–æ–∫—Å—É
                try:
                    logger.info(f"üñ±Ô∏èüéØ –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ({checkbox_x}, {checkbox_y})")
                    await asyncio.wait_for(
                        page.mouse.click(x=checkbox_x, y=checkbox_y),
                        timeout=config.CLOUDFLARE_TIMEOUTS
                    )

                except asyncio.TimeoutError:
                    logger.error("‚è≥‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —á–µ–∫–±–æ–∫—Å—É")
                    continue
                except Exception as e:
                    logger.error(f"‚ùåüñ±Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —á–µ–∫–±–æ–∫—Å—É: {e}")
                    continue

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                logger.info("‚è≥üõ°Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare...")
                if await _wait_for_cloudflare_completion(page):
                    logger.info("‚úÖüõ°Ô∏è Cloudflare —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω!")
                    return True
                else:
                    logger.warning(
                        f"‚ö†Ô∏èüõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ Cloudflare –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{config.CLOUDFLARE_ATTEMPTS})")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ö–æ–¥–∞ ‚Ññ{attempt + 1}: {type(e).__name__}: {e}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∏ –ª–∏ –º—ã –∑–∞—â–∏—Ç—É —Å–ª—É—á–∞–π–Ω–æ
            try:
                if not await check_cloudflare(page):
                    logger.info("ü§î‚úÖ –ü–æ—Ö–æ–∂–µ, –∑–∞—â–∏—Ç–∞ –±—ã–ª–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                    return True
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")

            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
            if attempt < config.CLOUDFLARE_ATTEMPTS - 1:
                wait_time = 3 + attempt  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                logger.info(f"‚è≥ –ü–∞—É–∑–∞ {wait_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(wait_time)

        logger.critical(f"üî•üõ°Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É Cloudflare –ø–æ—Å–ª–µ {config.CLOUDFLARE_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫")
        raise CloudflareRestartException("–°–±–æ–π –æ–±—Ö–æ–¥–∞ Cloudflare –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")

    except CloudflareRestartException:
        raise
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ bypass_cloudflare: {type(e).__name__}: {e}")
        raise CloudflareRestartException(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ bypass_cloudflare: {e}")


async def _handle_iframe_element(page: Page, iframe_element):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ iframe —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
    """
    try:
        bounding_box = await asyncio.wait_for(
            iframe_element.bounding_box(),
            timeout=5
        )

        if bounding_box:
            checkbox_x = bounding_box["x"] + 25
            checkbox_y = bounding_box["y"] + bounding_box["height"] / 2
            await page.mouse.click(x=checkbox_x, y=checkbox_y)
            logger.info("üñ±Ô∏èüí° –ö–ª–∏–∫ –ø–æ iframe —ç–ª–µ–º–µ–Ω—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω")
        else:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —Å–∞–º–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            await iframe_element.click()
            logger.info("üñ±Ô∏èüí° –ö–ª–∏–∫ –ø–æ iframe —ç–ª–µ–º–µ–Ω—Ç—É (–±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç) –≤—ã–ø–æ–ª–Ω–µ–Ω")

    except Exception as e:
        logger.error(f"‚ùåüí° –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ iframe —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
        raise


async def _wait_for_cloudflare_completion(page: Page, max_wait_seconds=35):
    """
    –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    """
    try:
        # –ù–µ–±–æ–ª—å—à–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
        await asyncio.sleep(2)

        for second in range(max_wait_seconds):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
                if second % 5 == 0:
                    try:
                        await asyncio.wait_for(
                            page.wait_for_load_state(config.WAIT_UNTIL),
                            timeout=3
                        )
                    except asyncio.TimeoutError:
                        pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ –º—ã –∑–∞—â–∏—Ç—É
                if not await check_cloudflare(page):
                    logger.info(f"‚úÖüõ°Ô∏è Cloudflare –ø—Ä–æ–π–¥–µ–Ω —á–µ—Ä–µ–∑ {second + 1} —Å–µ–∫—É–Ω–¥")
                    return True

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
                try:
                    error_elements = await page.query_selector_all('text="Access denied", text="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"')
                    if error_elements:
                        logger.error("üö´ –ü–æ–ª—É—á–µ–Ω –æ—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –æ—Ç Cloudflare")
                        return False
                except Exception:
                    pass

                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                if second % 5 == 0 and second > 0:
                    logger.info(f"‚è≥üõ°Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏... ({second}/{max_wait_seconds} —Å–µ–∫)")

                await asyncio.sleep(1)

            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
                await asyncio.sleep(1)

        logger.warning(f"‚è≥‚ùå –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Cloudflare ({max_wait_seconds} —Å–µ–∫)")
        return False

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
        return False


async def check_cloudflare(page: Page) -> bool:
    # if "challenge" in page.url:
    #     logger.info("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–∞–ø—á–µ–π (–ø–æ URL)")
    #     return True

    content = await page.content()
    if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫" in content.lower() or "challenge.cloudflare.com" in content.lower():
        logger.warning(f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return True

    title = await page.title()
    if title and ("security check" in title.lower() or
                  "cloudflare" in title.lower() or
                  "–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" in title.lower() or
                  "just a moment..." in title.lower() or
                  "–æ–¥–∏–Ω –º–æ–º–µ–Ω—Ç..." in title.lower() or
                  "site connection is secure" in title.lower() or
                  "checking if the site connection" in title.lower()):
        logger.warning(f"ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
        return True

    has_captcha = await page.evaluate('''
                () => {
                    return document.querySelector('.cf-turnstile') !== null || 
                           document.querySelector('#challenge-form') !== null ||
                           document.querySelector('iframe[src*="challenges.cloudflare.com"]') !== null ||
                           document.querySelector('iframe[src*="turnstile"]') !== null;
                }
            ''')

    if has_captcha:
        logger.warning("ü§ñ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return True

    return False
