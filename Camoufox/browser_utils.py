import asyncio
import logging
import os
import random
import re
import shutil
from datetime import datetime
from typing import Callable

from playwright.async_api import Page, Browser

import config
from cloudflare import check_cloudflare, bypass_cloudflare
from configure_logger import configure
from exceptions import CloudflareRestartException

logger = logging.getLogger(__name__)
configure(logger)


async def safe_goto(page: Page, url: str) -> bool:
    for attempt in range(config.MAX_RETRIES_PAGE):
        try:
            logger.info(f"‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{config.MAX_RETRIES_PAGE})")
            await page.goto(url, wait_until=config.WAIT_UNTIL)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
            if await check_cloudflare(page):
                await bypass_cloudflare(page)
            return True
        except CloudflareRestartException:
            logger.warning("üîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
            raise
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ {url} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{config.MAX_RETRIES_PAGE}): {e}")

            if attempt < config.MAX_RETRIES_PAGE - 1:
                delay = random.uniform(config.RETRY_DELAY_MIN, config.RETRY_DELAY_MAX)
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                await asyncio.sleep(delay)
                try:
                    await page.reload(timeout=30000)
                except:
                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É")
            else:
                logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è {url}")
                return False
    return False


async def save_page_html(page: Page, path: str, name_generator: Callable[[str], str]):
    if await check_cloudflare(page):
        raise CloudflareRestartException

    name = name_generator(page.url)
    content = await page.content()
    filename = f"{name}.html"
    filepath = os.path.join(path, filename)

    with open(filepath, "w", encoding="utf-8") as file:
        file.write(content)
    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {filepath}")


# def remove_profile_directory():
#     if os.path.exists(config.profile_path):
#         logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è: {config.profile_path}")
#         try:
#             shutil.rmtree(config.profile_path)
#             logger.info("‚úÖ –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
#         except OSError as err:
#             logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è: {err}")
#     else:
#         logger.warning("ü§∑ –ü–∞–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.")


async def cleanup_browser_gracefully(browser, worker_tabs):
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –∏ –±—Ä–∞—É–∑–µ—Ä–∞"""
    logger.info("üö™ –ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...")

    try:
        if worker_tabs:
            await close_worker_tabs(worker_tabs)
            worker_tabs.clear()

        await asyncio.sleep(1)

        await browser.close()

        await asyncio.sleep(1)

    except Exception as e:
        logger.warning(f"‚ö†Ô∏èüö™ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

    logger.info("‚úÖüö™ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def create_worker_tabs(browser: Browser) -> list[Page]:
    worker_tabs = []
    for i in range(config.MAX_CONCURRENT_TABS):
        worker_page = await browser.new_page()
        worker_tabs.append(worker_page)
        logger.info(f"üìë‚ú® –°–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –≤–∫–ª–∞–¥–∫–∞ #{i + 1}")
    return worker_tabs


async def close_worker_tabs(worker_tabs: list[Page]):
    i = 0
    for worker_page in worker_tabs:
        try:
            await worker_page.close()
            logger.info(f"üìëüí® –†–∞–±–æ—á–∞—è –≤–∫–ª–∞–¥–∫–∞ #{i + 1} –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏èüìë –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–∞–±–æ—á–µ–π –≤–∫–ª–∞–¥–∫–∏ #{i + 1}: {e}")
        finally:
            i += 1


async def simulate_human_mouse_movement(page: Page, duration: int = 2):
    """
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    try:
        logger.info(f"üñ±Ô∏è –ù–∞—á–∏–Ω–∞—é –∏–º–∏—Ç–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥...")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        viewport = page.viewport_size
        width = viewport.get('width', 1920)
        height = viewport.get('height', 1080)

        start_time = asyncio.get_event_loop().time()

        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –º—ã—à–∏
        current_x = random.randint(100, width - 100)
        current_y = random.randint(100, height - 100)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º—ã—à—å –≤ –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        await page.mouse.move(current_x, current_y)

        while (asyncio.get_event_loop().time() - start_time) < duration:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
            direction_x = random.choice([-1, 1])
            direction_y = random.choice([-1, 1])

            # –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è (–æ—Ç 20 –¥–æ 150 –ø–∏–∫—Å–µ–ª–µ–π)
            distance = random.randint(20, 150)

            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            new_x = current_x + (direction_x * distance)
            new_y = current_y + (direction_y * distance)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
            new_x = max(50, min(width - 50, new_x))
            new_y = max(50, min(height - 50, new_y))

            # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
            steps = random.randint(3, 8)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤
            for step in range(steps):
                intermediate_x = current_x + (new_x - current_x) * (step + 1) / steps
                intermediate_y = current_y + (new_y - current_y) * (step + 1) / steps

                await page.mouse.move(intermediate_x, intermediate_y)
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
                await asyncio.sleep(random.uniform(0.01, 0.05))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            current_x, current_y = new_x, new_y

            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –¥–≤–∏–∂–µ–Ω–∏—è–º–∏
            await asyncio.sleep(random.uniform(0.1, 0.3))

            # –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É (–∏–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è/—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è)
            if random.random() < 0.15:  # 15% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                await asyncio.sleep(random.uniform(0.5, 1.5))

        logger.info("‚úÖüñ±Ô∏è –ò–º–∏—Ç–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.warning(f"‚ö†Ô∏èüñ±Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏: {e}")
